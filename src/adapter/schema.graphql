schema {
    query: RootSchemaQuery
}
directive @filter(
    """
    Name of the filter operation to perform.
    """
    op: String!
    """
    List of string operands for the operator.
    """
    value: [String!]
) repeatable on FIELD | INLINE_FRAGMENT
directive @tag(
    """
    Name to apply to the given property field.
    """
    name: String
) on FIELD
directive @output(
    """
    What to designate the output field generated from this property field.
    """
    name: String
) on FIELD
directive @optional on FIELD
directive @recurse(
    """
    Recurse up to this many times on this edge. A depth of 1 produces the current
    vertex and its immediate neighbors along the given edge.
    """
    depth: Int!
) on FIELD
directive @fold on FIELD
directive @transform(
    """
    Name of the transformation operation to perform.
    """
    op: String!
) on FIELD

type RootSchemaQuery {
    Leagues(
        """
        The game to get leagues for.
        """
        game: String
    ): [League!]
}

type League {
    id: ID!
    image_url: String
    modified_at: String!
    name: String!
    slug: String!
    url: String

    series: [Series!]
}

type Series {
    id: ID!
    league_id: ID!

    modified_at: String!
    begin_at: String
    end_at: String

    full_name: String!
    name: String
    season: String
    slug: String!

    winner: Winner
    year: Int

    tournaments: [Tournament!]
}

type Tournament {
    id: ID!
    series_id: ID!
    league_id: ID!

    modified_at: String!
    begin_at: String
    end_at: String

    detailed_stats: Boolean!
    has_bracket: Boolean!
    live_supported: Boolean!

    name: String!
    prize_pool: String
    slug: String!
    tier: String
    winner: Winner

    #rosters: [Roster!]
    matches: [Match!]
    teams: [Team!]
    video_game: VideoGame!
}

type Match {
    id: ID!
    tournament_id: ID!
    series_id: ID!
    league_id: ID!

    modified_at: String!
    begin_at: String
    end_at: String
    original_scheduled_at: String
    rescheduled: Boolean
    scheduled_at: String

    detailed_stats: Boolean!
    draw: Boolean!
    forfeit: Boolean!
    game_advantage: Int
    match_type: String!
    number_of_games: Int!
    match_status: String!

    name: String!
    slug: String!

    winner: Winner

    #    opponents: [Opponent!]
}

type Team {
    id: ID!

    acronym: String
    image_url: String
    location: String
    modified_at: String!
    name: String!
    slug: String

    players: [Player!]
}

type Player {
    id: ID!

    age: Int
    birthday: String
    first_name: String
    image_url: String
    last_name: String
    modified_at: String!
    name: String!
    nationality: String
    role: String
    slug: String
}

type VideoGame {
    id: ID!
    name: String!
    slug: String!
    current_version: String
}

interface Winner {
    id: ID!
}

type WinnerTeam implements Winner {
    id: ID!
    team: Team!
}

type WinnerPlayer implements Winner {
    id: ID!
    player: Player!
}
